{"version":3,"sources":["Message.js","Firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","username","messages","isUser","console","log","userName","className","Card","CardContent","Typography","color","variant","component","message","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","Snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","placeholder","value","onChange","e","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8SA4BeA,G,MAxBDC,sBAAW,WAAqBC,GAAQ,IAA3BC,EAA0B,EAA1BA,SAASC,EAAiB,EAAjBA,SAC3BC,EAASF,IAAaC,EAASD,SAEpC,OADDG,QAAQC,IAAIH,EAASI,UAEhB,yBAAKN,IAAMA,EAAKO,UAAS,kBAAaJ,GAAU,iBAC/C,kBAACK,EAAA,EAAD,CAAMD,UAAWJ,EAAS,mBAAmB,qBAE1C,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAERV,GAAD,UAAcD,EAASD,UAAY,UAAnC,MALD,KAKqDC,EAASY,gB,iBCF7DC,EAbEC,IAASC,cAAe,CACvCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,uCCuDVC,MAxDf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACNC,EADM,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEN1B,EAFM,KAEG6B,EAFH,OAGkBH,mBAAS,IAH3B,mBAGN3B,EAHM,KAGG+B,EAHH,KA4Bd,OAvBEC,qBAAU,WACRlB,EAAGmB,WAAW,YACbC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAI,CAACC,GAAGD,EAAIC,GAAI3B,QAAQ0B,EAAIE,iBAE9D,IAEJT,qBAAU,WACPD,EAAYW,OAAO,kCACnB,IAcA,yBAAKpC,UAAU,OACd,yBAAKA,UAAU,aAAaqC,IAAI,mEAChC,kDACA,uCAAa3C,GAEb,0BAAOM,UAAU,YACjB,kBAACsC,EAAA,EAAD,CAAatC,UAAU,mBAEvB,kBAACuC,EAAA,EAAD,CAAOC,YAAY,mBAAmBxC,UAAU,YAAYyC,MAAOnB,EAAOoB,SAAU,SAAAC,GAAC,OAAGpB,EAASoB,EAAEC,OAAOH,UACzG,kBAACI,EAAA,EAAD,CAAY7C,UAAU,kBAAkB8C,UAAWxB,EAAOjB,QAAQ,YAAYD,MAAM,UAAU2C,KAAK,SAASC,QArB7F,SAACL,GAEnBA,EAAEM,iBACFzC,EAAGmB,WAAW,YAAYuB,IAAI,CAC5B3C,QAASe,EACT5B,SAASA,EACTyD,UAAU1C,IAASU,UAAUiC,WAAWC,oBAG1C9B,EAAS,MAcN,kBAAC,IAAD,SAID,kBAAC,IAAD,KAEG5B,EAASqC,KAAI,YAAmB,IAAjBE,EAAgB,EAAhBA,GAAG3B,EAAa,EAAbA,QAClB,OAAO,kBAAC,EAAD,CAAS+C,IAAKpB,EAAIxC,SAAUA,EAAUC,SAAUY,UC/C5CgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3E,QAAQ2E,MAAMA,EAAMjE,c","file":"static/js/main.0a4ca394.chunk.js","sourcesContent":["import { CardContent,Typography,Card } from '@material-ui/core'\r\nimport React,{forwardRef} from 'react'\r\nimport './Message.css';\r\n\r\nconst Message=forwardRef(({username,messages},ref)=> {\r\n   const isUser = username === messages.username;\r\n   console.log(messages.userName)\r\n    return (\r\n        <div ref ={ref} className={`message ${isUser && 'message_User'}`}>\r\n         <Card className={isUser ? \"message_UserCard\":\"message_guestcard\"}>\r\n         {/* <Card className=\"message_card\"> */}\r\n            <CardContent>\r\n                <Typography\r\n                color=\"white\" \r\n                variant=\"h5\"\r\n                component=\"h2\"\r\n                >\r\n                {!isUser && `${messages.username || \"Unknown\"}: `}  {messages.message} \r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n        </div>\r\n         \r\n             \r\n     \r\n    )\r\n})\r\n\r\nexport default Message\r\n//1:16:13","import firebase from \"firebase\"\r\n\r\nconst firebaseApp =firebase.initializeApp ({\r\n    apiKey: \"AIzaSyC79pbnlrSCazD4S1NOZ5YIxiiKw50etxw\",\r\n    authDomain: \"facebook-messanger-clone-9d7c5.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-messanger-clone-9d7c5.firebaseio.com\",\r\n    projectId: \"facebook-messanger-clone-9d7c5\",\r\n    storageBucket: \"facebook-messanger-clone-9d7c5.appspot.com\",\r\n    messagingSenderId: \"353129871915\",\r\n    appId: \"1:353129871915:web:5828bcb955453f18e9886e\",\r\n    measurementId: \"G-VFG4XSP266\"\r\n  });\r\n\r\n  const db = firebaseApp.firestore();\r\n\r\n  export default db","import React,{useState,useEffect} from 'react';\nimport { Button } from '@material-ui/core';\nimport { FormControl,InputLabel ,Input} from '@material-ui/core';\nimport Message from './Message';\nimport firebase from 'firebase'\nimport db from './Firebase'\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\n\nimport './App.css';\nfunction App() {\n  const [input,setInput]=useState('')\n  const [messages,setMessages]=useState([])\n  const [username,setUsername] = useState('');\n\n   useEffect(()=>{\n     db.collection('messages')\n     .orderBy('timestamp','desc')\n     .onSnapshot(Snapshot=>{\n       setMessages(Snapshot.docs.map(doc=> ({id:doc.id ,message:doc.data()})))\n     });\n   }, [])\n\n  useEffect(()=>{\n     setUsername(prompt(\"Please! Enter Your Name... \"));\n   },[])\n\n  const sendMessage = (e)=>{\n    //all the logic is goes here\n    e.preventDefault();\n    db.collection('messages').add({\n      message: input,\n      username:username,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    })\n    \n    setInput('')\n  }\n return (\n     <div className=\"App\">\n      <img className=\"image_logo\" src=\"https://www.flaticon.com/svg/static/icons/svg/1384/1384893.svg\"></img>\n      <h1>FaceBook-Messanger</h1>\n      <h3>Welcome {username}</h3>\n      {/* input field */}\n      <form  className=\"app_form\">\n      <FormControl className=\"app_formcontrol\">\n     \n      <Input placeholder='Enter Message...' className=\"app_input\" value={input} onChange={e=> setInput(e.target.value)} />\n       <IconButton className=\"app__iconbutton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}\n       >\n       <SendIcon />\n       </IconButton>\n     </FormControl>\n      </form>\n      <FlipMove>\n      {\n         messages.map(({id,message}) => {\n         return <Message key={id} username={username} messages={message}></Message>\n        })\n      }\n      </FlipMove>\n    \n      </div>\n  );\n}\n\nexport default App;\n//01:58:36","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}